apiVersion: apps/v1
kind: Deployment
metadata:
  name: conforl-app
  namespace: conforl
  labels:
    app: conforl
    component: main
    version: v0.1.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: conforl
      component: main
  template:
    metadata:
      labels:
        app: conforl
        component: main
        version: v0.1.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: conforl-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: conforl
        image: conforl:v0.1.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: CONFORL_LOG_LEVEL
          value: "INFO"
        - name: CONFORL_CONFIG_PATH
          value: "/app/config/conforl.yml"
        - name: CONFORL_DATA_DIR
          value: "/app/data"
        - name: CONFORL_MODEL_DIR
          value: "/app/models"
        - name: CONFORL_LOG_DIR
          value: "/app/logs"
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: conforl-secrets
              key: redis-url
        - name: POSTGRES_URL
          valueFrom:
            secretKeyRef:
              name: conforl-secrets
              key: postgres-url
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: data
          mountPath: /app/data
        - name: models
          mountPath: /app/models
        - name: logs
          mountPath: /app/logs
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: config
        configMap:
          name: conforl-config
      - name: data
        persistentVolumeClaim:
          claimName: conforl-data-pvc
      - name: models
        persistentVolumeClaim:
          claimName: conforl-models-pvc
      - name: logs
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - conforl
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: conforl-service
  namespace: conforl
  labels:
    app: conforl
    component: main
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app: conforl
    component: main

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: conforl-config
  namespace: conforl
data:
  conforl.yml: |
    # ConfoRL Configuration
    logging:
      level: INFO
      format: json
      
    database:
      url: ${POSTGRES_URL}
      pool_size: 10
      max_overflow: 20
      
    cache:
      redis_url: ${REDIS_URL}
      default_ttl: 3600
      
    monitoring:
      metrics_enabled: true
      tracing_enabled: true
      health_checks: true
      
    security:
      enable_auth: true
      token_expiry: 3600
      
    performance:
      max_workers: 4
      request_timeout: 30
      
    features:
      i18n_enabled: true
      compliance_checks: true
      auto_scaling: true

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: conforl-data-pvc
  namespace: conforl
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: conforl-models-pvc
  namespace: conforl
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 50Gi

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: conforl-service-account
  namespace: conforl

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: conforl
  name: conforl-role
rules:
- apiGroups: [""]
  resources: ["pods", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: conforl-role-binding
  namespace: conforl
subjects:
- kind: ServiceAccount
  name: conforl-service-account
  namespace: conforl
roleRef:
  kind: Role
  name: conforl-role
  apiGroup: rbac.authorization.k8s.io